<?php

/**
 * @file
 * This is the main code file for the Mass Contact module.
 *
 * This module enables users to send messages (contact) to multiple users
 * through selected roles.
 */

/* ************************************************
 *
 * Functions for implementing various Drupal hooks.
 *
 * ***********************************************/

/**
 * Implements hook_help().
 */
function mass_contact_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#mass_contact':
      $output .= '<p><b>' . t('Related tasks:') . '</b><br /><ol>' .
        '<li>' . l('Set Permissions', 'admin/user/permissions', array('fragment' => 'module-mass_contact')) . '</li>' .
        '<li>' . l('List current categories', 'admin/config/system/mass_contact') . '</li>' .
        '<li>' . l('Add new category', 'admin/config/system/mass_contact/add') . '</li>' .
        '<li>' . l('Configure the module', 'admin/config/system/mass_contact/settings') . '</li>' .
        '<li>' . l('Send mass e-mail', 'mass_contact') . '</li></ol>';
      $output .= '<p>' . t('The Mass Contact module is simply a modified version of the core contact module. It works opposite the latter, in that it allows site moderators (or anyone with permission), to <a href="mass_contact">send mass e-mail</a> to a set role or group of roles or even to all registered users.') . '</p>';
      $output .= '<p>' . t("The sender's own address may be placed in the 'To:' field and all recipients placed in the 'BCC:' field, or the recipients simply placed in the 'To:' field. Note that the latter option leaves all recipients open to abuse due to their e-mail addresses being visible to all other recipients.") . '</p>';
      $output .= '<p>' . t("The e-mail may be sent as HTML or plain text, and may include a single binary file attachment (if permitted by admin).") . '</p>';
      $output .= '<p>' . t("At the option of the sender (if permitted by admin), a node may be created in order to keep a record of the e-mail sent. Do not try to send e-mails by creating nodes; it will not work.") . '</p>';
      $output .= '<p>' . t('Users may opt-out of mass mailings on their profile page, but this may be overridden by the admin (or respected). The entire opt-out system may be disabled on the <a href="@settings-page">settings page</a>.', array('@settings-page' => url('admin/config/system/mass_contact/settings'))) . '</p>';
      $output .= '<p>' . t('Make sure to add at least one category and configure the module before trying to send mass e-mails.') . '</p>';

      if (!module_exists('menu')) {
        $menu_note = t('The menu item can be customized and configured only once the menu module has been <a href="@modules-page">enabled</a>.', array('@modules-page' => url('admin/modules')));
      }
      else {
        $menu_note = '';
      }

      $output .= '<p>' . t('The Mass Contact module also adds a <a href="@menu-settings">menu item</a> to the navigation block.', array('@menu-settings' => url('admin/structure/menu'))) . ' ' . $menu_note . '</p>';
      return ($output);
  }
} // End of mass_contact_help().


/**
 * Implements hook_permission().
 */
function mass_contact_permission() {
  $permissions = array(
    'administer mass contact' => array(
      'title' => t('Administer mass contact'),
      'description' => t('This permission sets whether the user is allowed to modify the categories and configuration settings of Mass Contact.'),
    ),
    'send mass contact e-mails' => array(
      'title' => t('Can send messages with Mass Contact'),
      'description' => t('This permission sets whether the user is allowed to send messages with the Mass Contact.'),
    ),
    'send mass contact attachments' => array(
      'title' => t('Can send attachments'),
      'description' => t('This permission sets whether the sender of the message is allowed to include attachments with the message.'),
    ),
    'choose whether to archive mass contact messages' => array(
      'title' => t('Can archive mass contact messages as content'),
      'description' => t('This permission sets whether the sender of the message is allowed to save an archive copy of the message as a node.'),
    ),
  );

  $result = db_select('mass_contact', 'mc')
    ->fields('mc', array('category'))
    ->execute();
  if (!empty($result)) {
    foreach ($result as $category) {
      $permission = 'send to users in the ' . $category->category . ' category';
      $permissions[$permission] = array(
        'title' => t('Send to users in the !category category', array('!category' => $category->category)),
        'description' => t('Allows the user to send messages to the users in the !category category', array('!category' => $category->category)),
      );
    }
  }

  return $permissions;
} // End of mass_contact_permission().


/**
 * Implements hook_menu().
 */
function mass_contact_menu() {
  $items = array();

  $items['admin/config/system/mass_contact'] = array(
    'title' => 'Mass Contact',
    'page callback' => 'mass_contact_admin_categories',
    'access arguments' => array('administer mass contact'),
    'description' => 'Configure Mass Contact and set up categories of people to send mail to.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/list'] = array(
    'title' => 'Category list',
    'page callback' => 'mass_contact_admin_categories',
    'access arguments' => array('administer mass contact'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'A listing of all existing categories.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/add'] = array(
    'title' => 'Add category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_edit'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'description' => 'Add a new category.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/edit'] = array(
    'title' => 'Edit Mass Contact category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_edit'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_CALLBACK,
    'description' => 'Modify an existing category.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/delete'] = array(
    'title' => 'Delete Mass Contact category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_delete'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_CALLBACK,
    'description' => 'Remove an existing category.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_settings_misc'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'description' => 'Configuration options for Mass Contact.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/settings/misc'] = array(
    'title' => 'Miscellaneous',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_settings_misc'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'Miscellaneous configuration options for Mass Contact.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/settings/header'] = array(
    'title' => 'Message header',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_settings_header'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'description' => 'Configuration options for the headers of the messages to be sent.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['admin/config/system/mass_contact/settings/body'] = array(
    'title' => 'Message body',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_contact_admin_settings_body'),
    'access arguments' => array('administer mass contact'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'description' => 'Configuration options for the bodies of the messages to be sent.',
    'file' => 'mass_contact.admin.inc',
  );
  $items['mass_contact'] = array(
    'title' => 'Mass Contact',
    'page callback' => 'mass_contact_site_page',
    'access arguments' => array('send mass contact e-mails'),
    'description' => 'Send an e-mail message to multiple users of this website.',
    'file' => 'mass_contact.page.inc',
  );

  return $items;
} // End of mass_contact_menu().


/**
 * Implements hook_menu_alter().
 */
function mass_contact_menu_alter(&$items) {
  if (!empty($items['node/add/mass-contact'])) {
    $items['node/add/mass-contact']['access callback'] = FALSE;
  }
} // End of mass_contact_menu_alter().


/**
 * Implements hook_user_presave().
 */
function mass_contact_user_presave(&$edit, $account, $category) {
dpm($edit); dpm($account); dpm($category);
  $edit['data']['mass_contact_optout'] = isset($edit['mass_contact_optout']) ? $edit['mass_contact_optout'] : '';

//  return array('mass_contact_optout' => $edit['mass_contact_optout']);
} // End of mass_contact_user_presave().

/**
 * Implements hook_form_alter() for the user_profile_form.
 */
function mass_contact_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#user_category'] == 'account') {
    if (variable_get('mass_contact_optout_d', 0) == 1) {
      $account = $form['#user'];

      $form['mass_contact'] = array(
        '#type' => 'fieldset',
        '#title' => t('Mass contact settings'),
        '#weight' => 5,
        '#collapsible' => TRUE,
      );
      $form['mass_contact']['mass_contact_optout'] = array(
        '#type' => 'checkbox',
        '#title' => t('Opt-out of mass e-mails'),
        '#default_value' => !empty($account->data['mass_contact_optout']) ? $account->data['mass_contact_optout'] : 0,
        '#description' => variable_get('mass_contact_optout_message', t('Allows you to opt-out of receiving mass e-mails from privileged users. Note that site administrators are able to include you in mass e-mails even if you choose not to enable this feature, and the ability to opt-out may be removed by the administrator at any time.')),
      );
    }
    elseif (variable_get('mass_contact_optout_d', 0) == 2) {
      // Initialize the variables we're going to use.
      $account = $form['#user'];
      $users_roles = array();
      $user_role = 0;
      $included_categories = array();

      // Start with the 'authenticated user' role, as it's not in the database.
      $users_roles[] = 2;
      // Get all the roles this user is a memeber of.
      global $user;
      $user_roles = db_select('users_roles', 'ur')
        ->fields('ur', array('rid'))
        ->condition('uid', $user->uid)
        ->execute();
      // Put them into an array for later reference.
      foreach ($user_roles as $user_role) {
        $users_roles[] = $user_role->rid;
      }

      // Get all Mass Contact categories.
      $categories = db_select('mass_contact', 'mc')
        ->fields('mc', array('cid', 'category', 'recipients'))
        ->execute();
      // Iterate through each category.
      foreach ($categories as $category) {
        // Pull out the roles that are a part of this category.
        foreach (explode(',', $category->recipients) as $role_id) {
          // If the category's role is one the user is part of, show the category.
          if (in_array($role_id, $users_roles)) {
            $included_categories[$category->cid] = $category->category;
          }
        }
      }

      if ($included_categories) {
        $form['mass_contact'] = array(
          '#type' => 'fieldset',
          '#title' => t('Mass contact settings'),
          '#weight' => 5,
          '#collapsible' => TRUE,
          '#description' => variable_get('mass_contact_optout_message', t('Allows you to opt-out of receiving mass e-mails from privileged users. Note that site administrators are able to include you in mass e-mails even if you choose not to enable this feature, and the ability to opt-out may be removed by the administrator at any time.')),
        );

        foreach ($included_categories as $category_cid => $category_category) {
          // If the category's role is one the user is part of, show the category.
          $form['mass_contact']['mass_contact_optout_' . $category_cid] = array(
            '#type' => 'checkbox',
            '#title' => t('Opt-out of mass e-mails to the %category category.', array('%category' => $category_category)),
            '#default_value' => !empty($account->data['mass_contact_optout_' . $category_cid]) ? $account->data['mass_contact_optout_' . $category_cid] : 0,
          );
        }
      }
    }
  }
} // End of mass_contact_form_user_profile_form_alter().


/**
 * Implements hook_node_delete().
 * /
function mass_contact_node_delete($node) {
  if ($node->type == 'mass_contact') {
    // Look for the key phrase in the node body. If it exists, then there is
    // an attachment that needs to be deleted.
dpm($node);
$test_node = node_load(14);
dpm($test_node);
    $offset1 = strpos($node->body, '<hr>Attachment:<br />');
    if ($offset1) {
      // Using the saved attachment path, find the file name.
      $file_location = variable_get('mass_contact_attachment_location', file_directory_path() . '/mass_contact_attachments');
      $file_location_start = strpos($node->body, $file_location, $offset1);
      if ($file_location_start) {
        // Get the attachment file name.
        $file_location_end = strpos($node->body, '">', $file_location_start);
        $file_path_name = drupal_substr($node->body, $file_location_start, $file_location_end - $file_location_start);

        if (file_exists($file_path_name)) {
          if (!file_delete($file_path_name)) {
            // Log an error.
            watchdog('mass_contact', 'There was an error deleting the attachment.', WATCHDOG_ERROR);
          }
        }
        else {
          // Log an error.
          watchdog('mass_contact', 'There was an indication of an attachment within the node body, but the attachment was not found. If the attachment is still there, it was NOT deleted.', WATCHDOG_WARNING);
        }
      }
      else {
        // Log an error.
        watchdog('mass_contact', 'There was an indication of an attachment within the node body, but the attachment path was not found. If the attachment is still there, it was NOT deleted.', WATCHDOG_WARNING);
      }
    }
  }
} // End of mass_contact_node_delete().
*/
